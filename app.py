{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import TimeSeriesSplit\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom io import StringIO\n\nst.set_page_config(page_title=\"EV Adoption Forecaster\", layout=\"wide\")\n\nst.title(\"üîã EV Adoption Forecaster\")\nst.markdown(\"Upload historical EV adoption data or existing forecasts to visualize and extend predictions.\")\n\n# File uploader with example file\nwith st.expander(\"‚ÑπÔ∏è Expected file formats\"):\n    st.write(\"\"\"\n    **Historical Data (for training new forecasts):**\n    - Date (YYYY-MM-DD)\n    - Battery Electric Vehicles (BEVs)\n    - Plug-In Hybrid Electric Vehicles (PHEVs)\n    - Electric Vehicle (EV) Total\n    - (Optional) Non-Electric Vehicle Total, Total Vehicles, Percent Electric Vehicles\n\n    **Forecast Data (for visualization):**\n    - Forecast Date (YYYY-MM-DD)\n    - Predicted EV Total\n    \"\"\")\n\n    # Example data\n    example_data = \"\"\"Date,Battery Electric Vehicles (BEVs),Plug-In Hybrid Electric Vehicles (PHEVs),Electric Vehicle (EV) Total\n2020-01-01,5000,3000,8000\n2020-02-01,5500,3200,8700\n2020-03-01,6000,3500,9500\"\"\"\n    st.download_button(\"Download example CSV\", data=example_data, file_name=\"example_ev_data.csv\")\n\nfile = st.file_uploader(\"Upload your EV dataset (CSV)\", type=[\"csv\"])\n\nif file:\n    try:\n        # Try reading with default encoding first, then try others if it fails\n        try:\n            df = pd.read_csv(file)\n        except UnicodeDecodeError:\n            file.seek(0)\n            df = pd.read_csv(file, encoding='latin1')\n            \n        is_forecast = 'Predicted EV Total' in df.columns\n\n        if is_forecast:\n            date_col = 'Forecast Date' if 'Forecast Date' in df.columns else 'Date'\n            df = df.rename(columns={date_col: 'Date'})\n            df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n            df = df.dropna(subset=['Date'])\n            df = df.sort_values('Date')\n\n            st.subheader(\"üìä Forecast Data Loaded\")\n            col1, col2 = st.columns(2)\n            with col1:\n                st.write(\"Forecast Sample:\")\n                st.dataframe(df.head())\n            with col2:\n                st.write(\"Forecast Summary:\")\n                st.write(f\"Time Range: {df['Date'].min().date()} to {df['Date'].max().date()}\")\n                st.write(f\"Total Records: {len(df)}\")\n                st.write(f\"Latest Prediction: {df['Predicted EV Total'].iloc[-1]:,}\")\n\n            fig = px.line(df, x='Date', y='Predicted EV Total', \n                         title='Uploaded Forecast Visualization',\n                         labels={'Predicted EV Total': 'EV Count', 'Date': 'Date'},\n                         markers=True)\n            fig.update_traces(line=dict(color='red', dash='dot'))\n            fig.update_layout(hovermode='x unified')\n            st.plotly_chart(fig, use_container_width=True)\n\n            historical_mode = st.checkbox(\"Extend this forecast using ML\", key='extend_forecast')\n            if historical_mode:\n                df = df.rename(columns={'Predicted EV Total': 'EV_Total'})\n        else:\n            historical_mode = True\n\n        if historical_mode:\n            def clean_data(df):\n                # Clean numeric columns\n                for col in df.columns:\n                    if df[col].dtype == 'object':\n                        df[col] = df[col].astype(str).str.replace(\",\", \"\", regex=False)\n                        df[col] = df[col].astype(str).str.replace(\"$\", \"\", regex=False)\n                        df[col] = df[col].astype(str).str.replace(\"%\", \"\", regex=False)\n\n                num_cols = [\n                    \"Battery Electric Vehicles (BEVs)\",\n                    \"Plug-In Hybrid Electric Vehicles (PHEVs)\",\n                    \"Electric Vehicle (EV) Total\",\n                    \"Non-Electric Vehicle Total\",\n                    \"Total Vehicles\",\n                    \"Percent Electric Vehicles\"\n                ]\n                \n                for col in num_cols:\n                    if col in df.columns:\n                        df[col] = pd.to_numeric(df[col], errors='coerce')\n\n                # Handle date column\n                df['Date'] = pd.to_datetime(df['Date'], errors='coerce')\n                df = df.dropna(subset=['Date'])\n                df = df.sort_values('Date')\n\n                # Create EV_Total if not present\n                if 'EV_Total' not in df.columns:\n                    bevs = df.get('Battery Electric Vehicles (BEVs)', pd.Series(0))\n                    phev = df.get('Plug-In Hybrid Electric Vehicles (PHEVs)', pd.Series(0))\n                    ev_total = df.get('Electric Vehicle (EV) Total', pd.Series(0))\n                    df['EV_Total'] = np.where(~np.isnan(ev_total), ev_total, bevs.fillna(0) + phev.fillna(0))\n                \n                # Calculate additional metrics if possible\n                if 'Non-Electric Vehicle Total' in df.columns and 'EV_Total' in df.columns:\n                    df['Total_Vehicles'] = df['EV_Total'] + df['Non-Electric Vehicle Total']\n                    # Handle division by zero safely\n                    df['Pct_EV'] = np.where(\n                        df['Total_Vehicles'] > 0,\n                        (df['EV_Total'] / df['Total_Vehicles']) * 100,\n                        0\n                    )\n                \n                return df\n\n            df = clean_data(df)\n\n            st.subheader(\"üìä Data Overview\")\n            col1, col2 = st.columns(2)\n            with col1:\n                st.write(\"Data Sample:\")\n                st.dataframe(df.head())\n            with col2:\n                st.write(\"Data Summary:\")\n                st.write(f\"Time Range: {df['Date'].min().date()} to {df['Date'].max().date()}\")\n                st.write(f\"Total Records: {len(df)}\")\n                st.write(f\"Current EV Total: {df['EV_Total'].iloc[-1]:,}\")\n                if 'Pct_EV' in df.columns:\n                    st.write(f\"Current EV Percentage: {df['Pct_EV'].iloc[-1]:.2f}%\")\n\n            # Feature engineering\n            df['Days_Since_Start'] = (df['Date'] - df['Date'].min()).dt.days\n            df['Month'] = df['Date'].dt.month\n            df['Quarter'] = df['Date'].dt.quarter\n            df['Year'] = df['Date'].dt.year\n            df['Day_of_Week'] = df['Date'].dt.dayofweek\n            df['Day_of_Year'] = df['Date'].dt.dayofyear\n            df['Week_of_Year'] = df['Date'].dt.isocalendar().week\n\n            # Lag features with safe backfilling\n            for lag in [1, 3, 6, 12]:\n                df[f'EV_Lag_{lag}'] = df['EV_Total'].shift(lag)\n                # Fill with mean instead of backfill to avoid propagating extreme values\n                df[f'EV_Lag_{lag}'] = df[f'EV_Lag_{lag}'].fillna(df['EV_Total'].mean())\n\n            # Rolling features with min_periods=1\n            df['EV_Rolling_Mean_3'] = df['EV_Total'].rolling(3, min_periods=1).mean()\n            df['EV_Rolling_Mean_12'] = df['EV_Total'].rolling(12, min_periods=1).mean()\n            df['EV_Rolling_Std_6'] = df['EV_Total'].rolling(6, min_periods=1).std().fillna(0)\n            \n            # Growth rate features with safe division\n            df['EV_MoM_Growth'] = df['EV_Total'].pct_change(periods=1)\n            df['EV_YoY_Growth'] = df['EV_Total'].pct_change(periods=12)\n            \n            # Replace infinite values from division by zero\n            growth_cols = ['EV_MoM_Growth', 'EV_YoY_Growth']\n            for col in growth_cols:\n                df[col] = df[col].replace([np.inf, -np.inf], 0).fillna(0)\n            \n            # Additional features if available\n            if 'Pct_EV' in df.columns:\n                df['Pct_EV_Lag_1'] = df['Pct_EV'].shift(1).fillna(df['Pct_EV'].mean())\n                df['Pct_EV_Rolling_Mean_3'] = df['Pct_EV'].rolling(3, min_periods=1).mean()\n\n            feature_cols = ['Days_Since_Start', 'Month', 'Quarter', 'Year',\n                          'EV_Lag_1', 'EV_Lag_3', 'EV_Lag_6', 'EV_Lag_12',\n                          'EV_Rolling_Mean_3', 'EV_Rolling_Mean_12',\n                          'EV_Rolling_Std_6', 'EV_MoM_Growth', 'EV_YoY_Growth']\n            \n            # Add percentage features if available\n            if 'Pct_EV' in df.columns:\n                feature_cols.extend(['Pct_EV_Lag_1', 'Pct_EV_Rolling_Mean_3'])\n\n            # Ensure no infinite or extremely large values remain\n            X = df[feature_cols].replace([np.inf, -np.inf], np.nan)\n            X = X.fillna(0)\n            \n            # Clip extremely large values\n            X = X.clip(lower=-1e10, upper=1e10)\n            \n            y = df['EV_Total']\n\n            st.subheader(\"‚öôÔ∏è Model Configuration\")\n            col1, col2, col3 = st.columns(3)\n            with col1:\n                n_estimators = st.slider(\"Number of trees\", 50, 500, 200, 50)\n            with col2:\n                learning_rate = st.slider(\"Learning rate\", 0.01, 0.3, 0.1, 0.01)\n            with col3:\n                max_depth = st.slider(\"Max depth\", 3, 10, 5)\n\n            with st.spinner(\"Training model with time series cross-validation...\"):\n                # Time series cross-validation\n                tscv = TimeSeriesSplit(n_splits=5)\n                metrics = {'rmse': [], 'mae': [], 'r2': []}\n                \n                for train_index, test_index in tscv.split(X):\n                    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n                    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n                    \n                    # Scale the data to prevent large values\n                    scaler = StandardScaler()\n                    X_train_scaled = scaler.fit_transform(X_train)\n                    X_test_scaled = scaler.transform(X_test)\n                    \n                    model = XGBRegressor(\n                        n_estimators=n_estimators,\n                        learning_rate=learning_rate,\n                        max_depth=max_depth,\n                        random_state=42,\n                        objective='reg:squarederror'\n                    )\n                    \n                    model.fit(X_train_scaled, y_train)\n                    y_pred = model.predict(X_test_scaled)\n                    \n                    metrics['rmse'].append(np.sqrt(mean_squared_error(y_test, y_pred)))\n                    metrics['mae'].append(mean_absolute_error(y_test, y_pred))\n                    metrics['r2'].append(r2_score(y_test, y_pred))\n\n                # Train final model on all data with scaling\n                scaler = StandardScaler()\n                X_scaled = scaler.fit_transform(X)\n                \n                model = XGBRegressor(\n                    n_estimators=n_estimators,\n                    learning_rate=learning_rate,\n                    max_depth=max_depth,\n                    random_state=42,\n                    objective='reg:squarederror'\n                )\n                model.fit(X_scaled, y)\n                y_pred = model.predict(X_scaled)\n                \n                avg_rmse = np.mean(metrics['rmse'])\n                avg_mae = np.mean(metrics['mae'])\n                avg_r2 = np.mean(metrics['r2'])\n\n                st.success(f\"\"\"\n                ‚úÖ Model trained successfully\n                - **Cross-validated RMSE**: {avg_rmse:,.2f} (average across folds)\n                - **Cross-validated MAE**: {avg_mae:,.2f} (average across folds)\n                - **Cross-validated R¬≤**: {avg_r2:.3f} (average across folds)\n                - **Last Actual EV Count**: {y.iloc[-1]:,}\n                - **Last Predicted EV Count**: {y_pred[-1]:,.0f}\n                \"\"\")\n\n                # Plot feature importance\n                fig = px.bar(\n                    x=model.feature_importances_,\n                    y=feature_cols,\n                    orientation='h',\n                    title='Feature Importance',\n                    labels={'x': 'Importance', 'y': 'Feature'}\n                )\n                st.plotly_chart(fig, use_container_width=True)\n\n            st.subheader(\"üîÆ Forecast Settings\")\n            col1, col2 = st.columns(2)\n            with col1:\n                future_months = st.slider(\"Months to forecast\", 6, 60, 24, key='forecast_months')\n            with col2:\n                confidence_interval = st.checkbox(\"Show confidence interval\", value=True)\n\n            last_date = df['Date'].iloc[-1]\n            future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=future_months, freq='MS')\n            future_df = pd.DataFrame({'Date': future_dates})\n            future_df['Days_Since_Start'] = (future_df['Date'] - df['Date'].min()).dt.days\n            future_df['Month'] = future_df['Date'].dt.month\n            future_df['Quarter'] = future_df['Date'].dt.quarter\n            future_df['Year'] = future_df['Date'].dt.year\n            future_df['Day_of_Week'] = future_df['Date'].dt.dayofweek\n            future_df['Day_of_Year'] = future_df['Date'].dt.dayofyear\n            future_df['Week_of_Year'] = future_df['Date'].dt.isocalendar().week\n\n            historical_ev = df['EV_Total'].values.tolist()\n            predicted = []\n            lower_bounds = []\n            upper_bounds = []\n\n            for i in range(len(future_df)):\n                # Prepare lag features\n                lags = {}\n                for lag in [1, 3, 6, 12]:\n                    if len(predicted) >= lag:\n                        lags[f'EV_Lag_{lag}'] = predicted[-lag]\n                    else:\n                        lags[f'EV_Lag_{lag}'] = historical_ev[-lag] if len(historical_ev) >= lag else np.mean(historical_ev)\n                \n                # Prepare rolling features\n                temp_df = future_df.iloc[[i]].copy()\n                for k, v in lags.items():\n                    temp_df[k] = v\n\n                temp_df['EV_Rolling_Mean_3'] = np.mean(predicted[-2:] + [lags['EV_Lag_1']]) if len(predicted) >= 2 else np.mean(historical_ev[-3:])\n                temp_df['EV_Rolling_Mean_12'] = np.mean(predicted[-11:] + historical_ev[-(12-len(predicted)):]) if len(predicted) >= 11 else np.mean(historical_ev[-12:])\n                temp_df['EV_Rolling_Std_6'] = np.std(predicted[-5:] + historical_ev[-(6-len(predicted)):]) if len(predicted) >= 5 else np.std(historical_ev[-6:])\n                \n                # Growth rates with safe division\n                if len(predicted) > 0:\n                    temp_df['EV_MoM_Growth'] = (predicted[-1] - lags['EV_Lag_1']) / lags['EV_Lag_1'] if lags['EV_Lag_1'] != 0 else 0\n                else:\n                    if len(historical_ev) >= 2:\n                        temp_df['EV_MoM_Growth'] = (historical_ev[-1] - historical_ev[-2]) / historical_ev[-2] if historical_ev[-2] != 0 else 0\n                    else:\n                        temp_df['EV_MoM_Growth'] = 0\n\n                # Handle YoY growth calculation more carefully\n                if len(predicted) >= 12:\n                    prev_year = predicted[-12]\n                    current_val = predicted[-1] if len(predicted) > 0 else historical_ev[-1]\n                    temp_df['EV_YoY_Growth'] = (current_val - prev_year) / prev_year if prev_year != 0 else 0\n                elif len(historical_ev) >= 12:\n                    prev_year = historical_ev[-12]\n                    current_val = predicted[-1] if len(predicted) > 0 else historical_ev[-1]\n                    temp_df['EV_YoY_Growth'] = (current_val - prev_year) / prev_year if prev_year != 0 else 0\n                else:\n                    temp_df['EV_YoY_Growth'] = 0\n                \n                # Percentage features if available\n                if 'Pct_EV' in df.columns:\n                    temp_df['Pct_EV_Lag_1'] = df['Pct_EV'].iloc[-1]\n                    temp_df['Pct_EV_Rolling_Mean_3'] = df['Pct_EV'].rolling(3).mean().iloc[-1]\n\n                X_future = temp_df[feature_cols]\n                X_future = X_future.replace([np.inf, -np.inf], np.nan).fillna(0)\n                X_future_scaled = scaler.transform(X_future)\n                \n                # Predict with uncertainty estimation\n                pred = model.predict(X_future_scaled)[0]\n                predicted.append(pred)\n                \n                # Simple confidence interval estimation\n                if confidence_interval:\n                    error = avg_rmse\n                    lower_bounds.append(max(0, pred - 1.96 * error))\n                    upper_bounds.append(pred + 1.96 * error)\n\n            forecast_df = pd.DataFrame({\n                'Forecast Date': future_df['Date'],\n                'Predicted EV Total': np.array(predicted).astype(int)\n            })\n            \n            if confidence_interval:\n                forecast_df['Lower Bound'] = np.array(lower_bounds).astype(int)\n                forecast_df['Upper Bound'] = np.array(upper_bounds).astype(int)\n\n            st.subheader(\"üìà Forecast Results\")\n            fig = go.Figure()\n            \n            # Historical data\n            fig.add_trace(go.Scatter(\n                x=df['Date'], \n                y=df['EV_Total'], \n                name='Historical', \n                mode='lines+markers', \n                line=dict(color='blue'),\n                hovertemplate='%{x|%b %Y}: %{y:,}<extra></extra>'\n            ))\n            \n            # Forecast data\n            fig.add_trace(go.Scatter(\n                x=forecast_df['Forecast Date'], \n                y=forecast_df['Predicted EV Total'], \n                name='Forecast', \n                mode='lines+markers', \n                line=dict(color='red', dash='dot'),\n                hovertemplate='%{x|%b %Y}: %{y:,}<extra></extra>'\n            ))\n            \n            # Confidence interval\n            if confidence_interval:\n                fig.add_trace(go.Scatter(\n                    x=forecast_df['Forecast Date'].tolist() + forecast_df['Forecast Date'].tolist()[::-1],\n                    y=forecast_df['Upper Bound'].tolist() + forecast_df['Lower Bound'].tolist()[::-1],\n                    fill='toself',\n                    fillcolor='rgba(255,0,0,0.2)',\n                    line=dict(color='rgba(255,255,255,0)'),\n                    hoverinfo=\"skip\",\n                    name='95% Confidence Interval'\n                ))\n            \n            fig.update_layout(\n                title='EV Adoption Forecast',\n                xaxis_title='Date',\n                yaxis_title='EV Count',\n                hovermode='x unified',\n                showlegend=True,\n                template='plotly_white'\n            )\n            \n            # Add range slider\n            fig.update_layout(\n                xaxis=dict(\n                    rangeselector=dict(\n                        buttons=list([\n                            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n                            dict(count=3, label=\"3y\", step=\"year\", stepmode=\"backward\"),\n                            dict(step=\"all\")\n                        ])\n                    ),\n                    rangeslider=dict(visible=True),\n                    type=\"date\"\n                )\n            )\n            \n            st.plotly_chart(fig, use_container_width=True)\n\n            # Show forecast table with formatting\n            st.dataframe(\n                forecast_df.style.format({\n                    'Forecast Date': lambda x: x.strftime('%Y-%m-%d'),\n                    'Predicted EV Total': '{:,}',\n                    **({'Lower Bound': '{:,}', 'Upper Bound': '{:,}'} if confidence_interval else {})\n                })\n            )\n\n            # Download options\n            csv = forecast_df.to_csv(index=False).encode('utf-8')\n            st.download_button(\n                label=\"üìÖ Download Forecast as CSV\", \n                data=csv, \n                file_name=\"ev_adoption_forecast.csv\", \n                mime=\"text/csv\", \n                key='download_forecast'\n            )\n\n    except Exception as e:\n        st.error(f\"\"\"\n        ‚ö†Ô∏è Error processing data:\n        {str(e)}\n\n        Please check:\n        1. Your file has either historical data or forecast columns\n        2. Date formats are correct (YYYY-MM-DD)\n        3. Numeric columns contain valid numbers\n        \"\"\")\n        st.text(\"Detailed error:\")\n        st.exception(e)\nelse:\n    st.info(\"üìÑ Please upload a CSV file to get started\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null}]}
